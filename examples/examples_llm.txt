## Quick Summary

This directory contains example configuration files for launching host applications that run SQL Database Agents. These agents are designed to connect to specific databases (like Jira or RT), interpret natural language questions, convert them into SQL queries, execute them, and return the results. These files serve as templates for developers to configure their own SQL-powered agents.

## Files Overview

- `jira_sql_request.yaml`: An example configuration for an agent that connects to and queries a PostgreSQL database containing Jira data.
- `rt_sql_request.yaml`: An example configuration for an agent that connects to and queries a PostgreSQL database containing Request Tracker (RT) and Salesforce support ticket data.

## Developer API Reference

The files in this directory are YAML configurations, not Python modules. They define the runtime behavior of an agent. The "API" is the set of configurable parameters within the YAML structure.

---

### jira_sql_request.yaml

**Purpose:** This configuration file sets up a complete "Jira SQL Request Agent". The agent is pre-configured with instructions, database connection details (via environment variables), a detailed database schema, and example queries to effectively answer natural language questions about Jira issues by querying a PostgreSQL database.

**Key Configuration Sections:**

This file configures a single agent within the `apps` list. The primary configuration is under `app_config`.

-   **`model`**: Defines the Large Language Model (LLM) to be used. It points to a shared configuration block (`*general_model`) that pulls connection details from environment variables (`LLM_SERVICE_...`).
-   **`instruction`**: A detailed system prompt that instructs the LLM on its role as a SQL assistant. It tells the model how to handle user questions, use the `execute_sql_query` tool, and manage errors or large result sets.
-   **`agent_init_function`**: Specifies the function to run when the agent starts. This is critical for the SQL agent plugin.
    -   **`module`**: `sam_sql_database.lifecycle` - The Python module containing the initialization logic.
    -   **`name`**: `initialize_sql_agent` - The function to call.
    -   **`config`**: A dictionary of parameters specific to the SQL agent initialization.
        -   `db_type: "postgresql"`: The type of database to connect to.
        -   `db_host`, `db_port`, `db_user`, `db_password`, `db_name`: Database connection parameters, typically supplied by environment variables (e.g., `${JIRA_RDS_POSTGRES_HOSTNAME}`).
        -   `database_purpose: str`: A high-level description of the database's purpose to give context to the LLM.
        -   `data_description: str`: A brief description of the data contained within the database.
        -   `auto_detect_schema: false`: When `false`, the agent will not try to infer the schema at runtime and will rely on `database_schema_override`.
        -   `database_schema_override: str`: A detailed, multi-line string defining the tables, columns, and data types. This is crucial for the LLM to generate accurate queries.
        -   `schema_summary_override: str`: A concise summary of the schema.
        -   `query_examples: List[Dict]`: A list of few-shot examples, mapping a `natural_language` question to the correct `sql_query`. This significantly improves the LLM's accuracy.
        -   `response_guidelines: str`: Instructions on how to format the final response, such as how to construct URLs for Jira tickets.
-   **`agent_cleanup_function`**: Specifies the `cleanup_sql_agent_resources` function from the `sam_sql_database.lifecycle` module to properly close database connections when the agent shuts down.
-   **`tools`**: Lists the tools available to the agent.
    -   `execute_sql_query`: The core function from `sam_sql_database.tools` that allows the agent to run the SQL queries it generates.
-   **`agent_card`**: Provides metadata about the agent's capabilities for discovery and user-facing interfaces.

**Usage Examples:**

To run the agent defined in this file, you would use the ADK `host` command. First, ensure all required environment variables (for the broker, LLM, and database) are set.

```bash
# Set environment variables for Solace broker, LLM, and the JIRA database
export SOLACE_BROKER_URL=ws://localhost:8080
export LLM_SERVICE_ENDPOINT=<your_llm_api_base>
export LLM_SERVICE_API_KEY=<your_llm_api_key>
export LLM_SERVICE_GENERAL_MODEL_NAME=<your_model_name>
export NAMESPACE=dev
export JIRA_RDS_POSTGRES_HOSTNAME=localhost
export JIRA_RDS_POSTGRES_USERNAME=user
export JIRA_RDS_POSTGRES_PASSWORD=password
export JIRA_RDS_POSTGRES_DATABASE=jira_db

# Run the ADK host with the example configuration
adk host -c plugins/sam-sql-database/examples/jira_sql_request.yaml
```

---

### rt_sql_request.yaml

**Purpose:** This configuration file sets up a complete "RT SQL Request Agent". The agent is configured to answer natural language questions about customer support tickets by querying a PostgreSQL database that contains data from Request Tracker (RT) and Salesforce. It includes a detailed schema, query examples, and specific guidelines for handling different ticket types.

**Key Configuration Sections:**

This file's structure is very similar to `jira_sql_request.yaml`, but tailored for the RT/Salesforce database.

-   **`model`**: Defines the LLM to be used, pointing to the shared configuration.
-   **`instruction`**: The system prompt for the LLM, defining its role as a SQL assistant for the customer support database.
-   **`agent_init_function`**: Configures the `initialize_sql_agent` function from `sam_sql_database.lifecycle`.
    -   **`config`**: The parameters are specific to the RT database.
        -   `db_type: "postgresql"`: The type of database.
        -   `db_host`, `db_port`, `db_user`, `db_password`, `db_name`: Connection parameters supplied by environment variables (e.g., `${RT_RDS_POSTGRES_HOSTNAME}`).
        -   `database_purpose: str`: A description of the RT/Salesforce database, explaining its purpose and how user identities are stored.
        -   `database_schema_override: str`: A very detailed schema definition for all `rt_*` tables, including columns from both RT and Salesforce.
        -   `schema_summary_override: str`: A concise summary of the support ticket database schema.
        -   `query_examples: List[Dict]`: Few-shot examples demonstrating how to query for ticket information.
        -   `response_guidelines: str`: Crucial instructions for formatting responses, including how to generate different URLs for RT tickets versus Salesforce cases.
-   **`agent_cleanup_function`**: Specifies `cleanup_sql_agent_resources` to ensure the database connection is closed on shutdown.
-   **`tools`**: Makes the `execute_sql_query` tool available to the agent.
-   **`agent_card`**: Provides metadata for the RT SQL agent, including example questions.

**Usage Examples:**

To run the agent, set the required environment variables for the broker, LLM, and the RT database, then launch the ADK host.

```bash
# Set environment variables for Solace broker, LLM, and the RT database
export SOLACE_BROKER_URL=ws://localhost:8080
export LLM_SERVICE_ENDPOINT=<your_llm_api_base>
export LLM_SERVICE_API_KEY=<your_llm_api_key>
export LLM_SERVICE_GENERAL_MODEL_NAME=<your_model_name>
export NAMESPACE=dev
export RT_RDS_POSTGRES_HOSTNAME=localhost
export RT_RDS_POSTGRES_USERNAME=user
export RT_RDS_POSTGRES_PASSWORD=password
export RT_RDS_POSTGRES_DATABASE=rt_db

# Run the ADK host with the example configuration
adk host -c plugins/sam-sql-database/examples/rt_sql_request.yaml
```